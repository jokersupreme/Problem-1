//Problem 2
bool getValue(bool byte[8], int offset)
{
	return true;
}
void writeValue(bool* byte, int offset, bool value)
{
	//////
}
void printValue(bool byte[8])
{
	cout << byte[0];
	cout << byte[1];
	cout << byte[2];
	cout << byte[3];
	cout << byte[4];
	cout << byte[5];
	cout << byte[6];
	cout << byte[7] << endl;
}
void printValueInDecimal(bool byte[8])
{
	int total = 0;
	if(byte[0])
		total = 1;
	else
		total = 0;
	if(byte[1])
		total = total + 2;
	else
		total = total;
	if(byte[2])
		total = total + 4;
	else
		total = total;
	if(byte[3])
		total = total + 8;
	else
		total = total;
	if(byte[4])
		total = total + 16;
	else
		total = total;
	if(byte[5])
		total = total + 32;
	else
		total = total;
	if(byte[6])
		total = total + 64;
	else
		total = total;
	if(byte[7])
		total = total + 128;
	else
		total = total;
		
	cout << "This is the number in decimal: " << total << endl;
}
bool* mux(bool* output, bool operation, bool input1[8], bool input2[8])
{
	
}
bool* addu(bool* output, bool i1[8], bool i2[8]);
{
	bool i17 = input[7];
	bool i27 = input[7];
	bool sum7 = SUM(i17,i27);
	bool CarryOut7 = CarryOut(i17,i27,0);
	output[7] = sum7;
	
	bool i16 = input[6];
	bool i26 = input[6];
	bool sum6 = SUM(i16,i26,CarryOut7);
	bool CarryOut6 = CarryOut(i16,i26,CarryOut7);
	output[6] = sum6;
	
	bool i15 = input[5];
	bool i25 = input[5];
	bool sum5 = SUM(i15,i25,CarryOut6);
	bool CarryOut5 = CarryOut(i15,i25,CarryOut6);
	output[5] = sum5;
	
	bool i14 = input[4];
	bool i24 = input[4];
	bool sum4 = SUM(i14,i24,CarryOut5);
	bool CarryOut4 = CarryOut(i15,i25,CarryOut5);
	output[4] = sum4;
	
	bool i13 = input[3];
	bool i23 = input[3];
	bool sum3 = SUM(i13,i23,CarryOut4);
	bool CarryOut3 = CarryOut(i13,i23,CarryOut4);
	output[3] = sum3;
	
	bool i12 = input[2];
	bool i22 = input[2];
	bool sum2 = SUM(i12,i22,CarryOut3);
	bool CarryOut2 = CarryOut(i12,i22,CarryOut3);
	output[2] = sum2;
	
	bool i11 = input[1];
	bool i21 = input[1];
	bool sum1 = SUM(i11,i21);
	bool CarryOut1 = CarryOut(i11,i21,CarryOut2);
	output[7] = sum7;
	
	bool i10 = input[0];
	bool i20 = input[7];
	bool sum0 = SUM(i17,i27,CarryOut1);
	bool CarryOut0 = CarryOut(i10,i20,CarryOut1);
	output[0] = sum0;
}
bool* negate(bool* output, bool input[8]) //(create the 2's complement version of this number - make sure that a value negated twice is itself)
{
	bool temp[8] = new bool temp[8];
	bool temp[0] = NOT(input[0]);
	bool temp[1] = NOT(input[1]);
	bool temp[2] = NOT(input[2]);
	bool temp[3] = NOT(input[3]);
	bool temp[4] = NOT(input[4]);
	bool temp[5] = NOT(input[5]);
	bool temp[6] = NOT(input[6]);
	bool temp[7] = NOT(input[7]);
	bool one[8] = "00000001";
	
	output = addu(output,temp,one);
}
bool* subu(bool* output, bool input1[8], bool input2[8]);
{
	//a-b
	bool* negb = new bool [8];
	negb = neg(negb,b);
	output = sumu(output,a,negb);
	
	return output;
}
bool equal(bool input1[8], bool input2[8]); (return 0 if two values are different) 
bool lessthan(bool input1[8], bool input2[8]); (return 0 if false)
bool greaterthan(bool input1[8], bool input2[8]); (return 0 if false)
bool* equal(bool* output, bool input1[8], bool input2[8]); (return 00000000 if two values are different)
